import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

export interface EmergencyPatient {
  id: string;
  emergency_id: string;
  patient_name: string;
  estimated_age: number;
  gender: string;
  condition_description: string;
  allergies: string;
  medications: string;
  emergency_contact_phone: string;
  hospital_name: string;
  created_at: string;
  status: string;
}

export const useEmergency = () => {
  const [loading, setLoading] = useState(false);

  const createEmergencyPatient = async (emergencyData: {
    patient_name?: string;
    estimated_age?: number;
    gender?: string;
    condition_description?: string;
    allergies?: string;
    medications?: string;
    emergency_contact_phone?: string;
    hospital_name?: string;
  }) => {
    setLoading(true);
    
    try {
      const { data, error } = await supabase
        .from('emergency_patients')
        .insert({
          ...emergencyData,
          emergency_id: '' // This will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating emergency patient:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('Error creating emergency patient:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const getEmergencyPatient = async (emergencyId: string) => {
    setLoading(true);
    
    try {
      const { data, error } = await supabase
        .from('emergency_patients')
        .select('*')
        .eq('emergency_id', emergencyId)
        .single();

      if (error) {
        console.error('Error fetching emergency patient:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('Error fetching emergency patient:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    createEmergencyPatient,
    getEmergencyPatient
  };
};
